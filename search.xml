<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring MVC</title>
      <link href="/2020/03/13/Spring%20MVC/"/>
      <url>/2020/03/13/Spring%20MVC/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h1 id="Spring-MVC-运行流程"><a href="#Spring-MVC-运行流程" class="headerlink" title="Spring MVC 运行流程"></a>Spring MVC 运行流程</h1><p>一、客户端发送http请求</p><p>二、通过Web服务器找到前端控制器(DispatcherServlet)</p><p>三、前端控制器分发请求映射处理器(HandlerMapping)</p><p>四、映射处理器返回一个Handler对象给前端控制器</p><p>五、前端控制器给Handler对象选择一个适合的适配器(HandlerAdapter)执行</p><p>六、适配器执行完后返回一个ModelAndView给前端控制器</p><p>七、前端控制器将ModelAndView对象交给视图解析器</p><p>八、视图解析器将解析的View返回给前端控制器</p><p>九、前端控制器进行视图渲染</p><p>十、前端控制器向客户端响应结果</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>return “redirect:/xxx”;</p><h2 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h2><p>return “/xxx”;</p><p>return “forward:/xxx”;</p><h3 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h3>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2020/03/12/Spring/"/>
      <url>/2020/03/12/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="Spring的特点"><a href="#Spring的特点" class="headerlink" title="Spring的特点"></a>Spring的特点</h2><ul><li>开源、轻量级、非入侵式的框架</li><li>Spring就是一个轻量级的控制反转（IoC）和面向切面编程（AOP）的框架</li><li><strong>控制反转IoC是一种设计思想，依赖注入DI是实现IoC的一种方法。</strong></li><li><strong>控制反转是一种通过描述XML/注解并通过第三方去获取特定对象的方式。</strong></li><li><strong>在Spring中实现控制反转是IoC容器，其方法实现是依赖注入DI</strong></li></ul><h2 id="Spring的组成"><a href="#Spring的组成" class="headerlink" title="Spring的组成"></a>Spring的组成</h2><h3 id="程序耦合性"><a href="#程序耦合性" class="headerlink" title="程序耦合性"></a>程序耦合性</h3><ul><li><p><strong>耦合</strong>指的是程序间的依赖，包括类之间的依赖、方法之间的依赖。</p></li><li><p><strong>解耦</strong>指的是<strong>降低程序间的依赖关系</strong>。</p></li><li><p>实际开发中应该做到，编译时期不依赖，运行时期才依赖。</p></li></ul><h3 id="解耦的思路"><a href="#解耦的思路" class="headerlink" title="解耦的思路"></a>解耦的思路</h3><p>一、通过反射来创建对象，避免使用new的方式创建对象</p><p>二、通过读取配置文件来获取要创建的对象全限类名</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h3 id="创建Bean对象的工厂"><a href="#创建Bean对象的工厂" class="headerlink" title="创建Bean对象的工厂"></a>创建Bean对象的工厂</h3><ul><li><p>创建properties文件</p></li><li><p>创建BeanFactory工厂类</p><ul><li>定义Properties对象</li><li>使用静态代码块实例Properties对象</li><li>创建getBean()方法</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义Properties对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Properties props<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态代码块实例Properties对象</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 实例化</span>            props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取properties文件的流对象</span>            InputStream in <span class="token operator">=</span> BeanFactory<span class="token punctuation">.</span>getClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionInInitializerError</span><span class="token punctuation">(</span><span class="token string">"初始化properties对象失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取bean对象方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object bean <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String beanPath <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>beanname<span class="token punctuation">)</span><span class="token punctuation">;</span>            bean <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>beanPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次都会调用默认构造函数创建对象</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Bean工厂解耦升级版"><a href="#Bean工厂解耦升级版" class="headerlink" title="Bean工厂解耦升级版"></a>Bean工厂解耦升级版</h3><ul><li>解决多例</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义Properties对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Properties props<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义一个Map集合，用于存储我们要创建的对象，我们把它称之为容器</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> beans<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态代码块实例Properties对象</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 实例化</span>            props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取properties文件的流对象</span>            InputStream in <span class="token operator">=</span> BeanFactory<span class="token punctuation">.</span>getClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化容器</span>            beans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 取出配置文件中的所有key</span>            Enumeration keys <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 遍历枚举</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 取出每个Key</span>                String Key <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 根据Key获取Value</span>                String beanPath <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 反射创建对象</span>                Object value <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>beanPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 把key和value存入容器中</span>                beans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionInInitializerError</span><span class="token punctuation">(</span><span class="token string">"初始化properties对象失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取bean对象方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="Spring-IoC"><a href="#Spring-IoC" class="headerlink" title="Spring IoC"></a>Spring IoC</h1><h2 id="IoC的概述"><a href="#IoC的概述" class="headerlink" title="IoC的概述"></a>IoC的概述</h2><ul><li><p>把创建对象的权力交给Spring容器管理，降低程序间耦合性。</p></li><li><p><strong>Ioc原理：内部Map结构，通过id作为key，全限类名作为value</strong></p></li></ul><h3 id="IoC核心容器对象"><a href="#IoC核心容器对象" class="headerlink" title="IoC核心容器对象"></a>IoC核心容器对象</h3><ul><li><strong>ApplicationContext</strong>对应三个常用实现类<ul><li>ClassPathXmlApplicationContext：加载类路径下的配置文件</li><li>FileSystemXmlApplicationContext：加载磁盘任意路径下的配置文件（必须有访问权限）</li><li>AnnotationConfigApplicationContext</li></ul></li><li><strong>ApplicationContext</strong>采用策略加载完配置文件后立即创建对象的方式。</li></ul><h3 id="bean创建对象的三种方式"><a href="#bean创建对象的三种方式" class="headerlink" title="bean创建对象的三种方式"></a>bean创建对象的三种方式</h3><ul><li>set注入</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>第一种：通过使用默认构造函数创建，如果类中没有默认构造函数，则无法创建对象。</p><pre class=" language-java"><code class="language-java"></code></pre></li></ul><h3 id="用于创建对象的注解-Component"><a href="#用于创建对象的注解-Component" class="headerlink" title="用于创建对象的注解@Component"></a>用于创建对象的注解@Component</h3><ul><li>作用：用于把当前类对象放入Spring容器中</li><li>属性：value，用于指定bean的id。不写时，默认值为当前类名且首字母改小写。</li></ul><p><strong>为了明确三层对象，衍生了一下三个注解，作用与@Component是一样的。</strong></p><ul><li><p>@Controller：用于表现层</p></li><li><p>@Service：用于业务层</p></li><li><p>@Repository：用于持久层</p></li></ul><h3 id="用于注入数据的注解"><a href="#用于注入数据的注解" class="headerlink" title="用于注入数据的注解"></a>用于注入数据的注解</h3><ul><li><h4 id="Autowired：自动按照类型注入。"><a href="#Autowired：自动按照类型注入。" class="headerlink" title="@Autowired：自动按照类型注入。"></a>@Autowired：自动按照类型注入。</h4></li></ul><p><strong>如果容器中有唯一的一个bean对象类型和要注入数据类型一致，则直接按照数据类型注入。</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>如果容器中有多个Bean对象类型，则根据变量名称注入</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl1</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><ul><li>当使用@Autowired注解注入时，遇到多个Bean对象类型，可以和该注解同时使用，它不能单独使用</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl1</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userService1"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><ul><li>使用该注解等价于@Autowired和@Qualifier组合使用</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    @Autowired</span><span class="token comment" spellcheck="true">//  @Qualifier("userService1")</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span><span class="token string">"userService1"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><h4 id="Value：以上三个注解只能注入其他bean类型的数据，该注解用于注入基本数据类型和String类型的数据"><a href="#Value：以上三个注解只能注入其他bean类型的数据，该注解用于注入基本数据类型和String类型的数据" class="headerlink" title="@Value：以上三个注解只能注入其他bean类型的数据，该注解用于注入基本数据类型和String类型的数据"></a>@Value：以上三个注解只能注入其他bean类型的数据，该注解用于注入基本数据类型和String类型的数据</h4></li><li><h4 id="Scope：用于改变作用范围的注解，常用取值：singleton（单例）-prototype（多例）"><a href="#Scope：用于改变作用范围的注解，常用取值：singleton（单例）-prototype（多例）" class="headerlink" title="@Scope：用于改变作用范围的注解，常用取值：singleton（单例）/prototype（多例）"></a>@Scope：用于改变作用范围的注解，常用取值：singleton（单例）/prototype（多例）</h4></li></ul><h1 id="Spring-使用配置类取代xml"><a href="#Spring-使用配置类取代xml" class="headerlink" title="Spring 使用配置类取代xml"></a>Spring 使用配置类取代xml</h1><ul><li><h4 id="Configuration：放在类上，标记该类为配置类"><a href="#Configuration：放在类上，标记该类为配置类" class="headerlink" title="@Configuration：放在类上，标记该类为配置类"></a>@Configuration：放在类上，标记该类为配置类</h4></li><li><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><ul><li>放在类上，用于通过注解指定Spring在创建容器时要扫描的包。</li><li>属性：value，它和basePackages的作用是一样的，都是用于指定扫描指定包下的类</li><li>@ComponentScan(“com.xxx”)/@ComponentScan(“basePackages=”com.xxx”)<ul><li>等同xml配置中的&lt;context:component-scan base-package=”com.xxx”/&gt;</li></ul></li></ul></li><li><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><ul><li>作用：用于把当前方法的返回值作为bean对象存入Spring容器中</li><li>属性：name:指定bean的id，如果不写，默认为该方法的方法名</li><li>当方法有参数时，spring框架会去容器找其他可用bean对象，查找的方式和Autowired一样。</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.lyk"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 声明userRealm     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"userRealm"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserRealm <span class="token function">userRealm</span><span class="token punctuation">(</span>CredentialsMatcher credentialsMatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserRealm userRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注入凭证匹配器</span>        userRealm<span class="token punctuation">.</span><span class="token function">setCredentialsMatcher</span><span class="token punctuation">(</span>credentialsMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userRealm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置SecurityManager     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"securityManager"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SecurityManager <span class="token function">securityManager</span><span class="token punctuation">(</span>UserRealm userRealm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultWebSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注入userRealm</span>        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>userRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><ul><li>作用：用于导入其他的配置类</li><li>属性value：用于指定其他配置类的字节码</li></ul></li><li><h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h4><ul><li>作用：用于指定properties文件的位置</li><li>属性value：指定文件的名称和路径，关键字：classpath表示类路径下</li></ul></li></ul><h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><h2 id="AOP的实现方式一"><a href="#AOP的实现方式一" class="headerlink" title="AOP的实现方式一"></a>AOP的实现方式一</h2><ul><li>引入AOP织入依赖包 - aspectjweaver</li><li>切入类实现MethodBeforeAdvice</li></ul><h2 id="AOP的实现方式二"><a href="#AOP的实现方式二" class="headerlink" title="AOP的实现方式二"></a>AOP的实现方式二</h2><ul><li>编写一个切入类</li><li>切入类中编写方法</li></ul><h2 id="AOP的实现方式三（注解）"><a href="#AOP的实现方式三（注解）" class="headerlink" title="AOP的实现方式三（注解）"></a>AOP的实现方式三（注解）</h2><ul><li>编写一个切入类，类上标注@Aspect注解</li><li>切入类中的方法使用@Before(“excution()”)、@After()、@Around</li></ul><h1 id="Spring-事务管理"><a href="#Spring-事务管理" class="headerlink" title="Spring 事务管理"></a>Spring 事务管理</h1><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><ul><li>基于AOP实现</li></ul><h2 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h2><ul><li>在代码中进行事务管理</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot</title>
      <link href="/2020/03/12/Spring%20Boot/"/>
      <url>/2020/03/12/Spring%20Boot/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>简化Spring应用程序的创建和开发过程</li><li>抛弃繁琐的xml配置过程，采用注解配置</li><li>快速创建基于Spring框架的应用程序，让编码、配置、部署、监控变简单</li><li>内嵌Tomcat、Jetty服务器，不需要部署war包文件</li><li>提供约定的starter POM来简化Maven配置，让Maven的配置变得简单</li><li>自动配置Spring、Spring MVC等</li><li>提供了程序的健康检查等功能</li><li>内部依然使用SSM等框架</li><li><strong>一个快速开发的脚手架</strong></li><li><strong>基于SpringBoot可以快速的开发单个微服务</strong></li></ul><h3 id="四大核心"><a href="#四大核心" class="headerlink" title="四大核心"></a>四大核心</h3><ul><li>自动配置✔</li><li>起步依赖✔</li><li>Actoator（健康检查）</li><li>命令行界面</li></ul><h3 id="第一个Spring-Boot程序"><a href="#第一个Spring-Boot程序" class="headerlink" title="第一个Spring Boot程序"></a>第一个Spring Boot程序</h3><ul><li>基本POM文件</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 父级依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lyk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hello-spring-boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hello-spring-boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 属性配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring Boot 开发Web项目的起步依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 测试起步依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- SpringBoot提供的项目编译打包插件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><ul><li>Spring Boot入口main方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span> <span class="token comment" spellcheck="true">//该注解是SpringBoot项目的核心注解，主要是开启Spring自动配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloSpringBootApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 启动了SpringBoot程序，启动Spring容器，启动内嵌的Tomcat</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloSpringBootApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>创建Spring MVC 的Controller类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/boot/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello Spring Boot."</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><ul><li>application.properties / appilication.yml</li><li>当两种配置同时存在时，properties优先yml</li><li>多环境配置文件<ul><li>在application.properties中使用spring.profiles.active=dev/test/online调用指定配置文件，该配置失效</li><li>application-dev.properties</li><li>application-online.properties</li><li>application-test.properties</li></ul></li></ul><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><ul><li>读取配置属性<ul><li>@Value(${key})</li><li>@ConfigurationProperties(prefix = “”)</li></ul></li></ul><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><ul><li>Controller</li><li>RestController<ul><li>Spring4后新增注解</li><li>@Controller与ResponseBody的组合注解</li><li>用于返回字符串或json数据</li></ul></li><li>GetMapping<ul><li>GetMapping(“path”) = RequestMapping(value=”path”, method=RequestMethod.GET)</li></ul></li><li>PostMapping<ul><li>PostMapping(“path”) = RequestMapping(value=”path”, method=RequestMethod.POST)</li></ul></li><li>PutMapping</li><li>DeleteMapping</li></ul><h3 id="Spring-Boot-使用JSP"><a href="#Spring-Boot-使用JSP" class="headerlink" title="Spring Boot 使用JSP"></a>Spring Boot 使用JSP</h3><h3 id="Spring-Boot-集合-Mybatis"><a href="#Spring-Boot-集合-Mybatis" class="headerlink" title="Spring Boot 集合 Mybatis"></a>Spring Boot 集合 Mybatis</h3><ul><li><p>配置数据库连接池（HikariCP）</p><ul><li>pom.xml添加依赖</li></ul><pre class=" language-xml"><code class="language-xml"></code></pre></li></ul><ul><li><p>在pom.xml中配置相关jar依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 加载mybatis整合SpringBoot --></span>mybatis-spring-boot-starter<span class="token comment" spellcheck="true">&lt;!-- MySQL的JDBC驱动包 --></span>mysql-connector-java</code></pre></li><li><p>在核心配置文件配置Mybatis的Mapper.xml文件所在位置</p><ul><li>mybatis.mapper-location=classpath:xxx/xxx/xxx/*.xml</li></ul></li><li><p>在核心配置文件中配置数据源 - 数据库连接信息</p></li><li><p>在Mapper接口中添加@Mapper注解 或者 在运行的主类上添加@Mapperscan(“mapperInterfacePath”)注解包扫描</p></li></ul><h3 id="Spring-Boot-事务支持"><a href="#Spring-Boot-事务支持" class="headerlink" title="Spring Boot 事务支持"></a>Spring Boot 事务支持</h3><ul><li>在入口类中使用注解开启事务<ul><li>@EnableTransactionManagement </li></ul></li><li>在访问数据库的Service方法上添加注解<ul><li>@Transactional</li></ul></li></ul><h3 id="Spring-Boot-实现-RESTFull-API"><a href="#Spring-Boot-实现-RESTFull-API" class="headerlink" title="Spring Boot 实现 RESTFull API"></a>Spring Boot 实现 RESTFull API</h3><h3 id="Spring-Boot-热部署"><a href="#Spring-Boot-热部署" class="headerlink" title="Spring Boot 热部署"></a>Spring Boot 热部署</h3><ul><li><p>在实际开发中，我们修改某些代码逻辑功能或页面都需要重启应用</p></li><li><p>热部署指当我们修改代码后，服务能自动重启加载新修改的内容</p></li><li><p>通过Spring Boot自己开发的插件实现</p></li><li><p>插件在Maven中配置如下</p><pre><code>&lt;!- Spring Boot 开发自动热部署 --》spring-boot-devtools</code></pre></li></ul><h3 id="Spring-Boot-集成-Redis"><a href="#Spring-Boot-集成-Redis" class="headerlink" title="Spring Boot 集成 Redis"></a>Spring Boot 集成 Redis</h3><ul><li><p>在pom.xml中配置相关的jar依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 加载Spring Boot Redis包 --></span>spring-boot-starter-data-redis</code></pre></li><li><p>在核心配置文件中配置redis连接信息</p></li><li><p>此时SpringBoot已经自动配置Redis Template，在需要操作Redis的类中注入redis Template</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 泛型只能写&lt;String, String>、&lt;Object, Object></span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> Redis Template<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span></code></pre></li></ul><h3 id="Spring-Boot-集成-Dubbo"><a href="#Spring-Boot-集成-Dubbo" class="headerlink" title="Spring Boot 集成 Dubbo"></a>Spring Boot 集成 Dubbo</h3><ul><li><p>在pom.xml中配置相关的jar依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 加载Spring Boot Dubbo包 --></span>dubbo-spring-boot-starter</code></pre></li></ul><h3 id="Spring-Boot-使用拦截器"><a href="#Spring-Boot-使用拦截器" class="headerlink" title="Spring Boot 使用拦截器"></a>Spring Boot 使用拦截器</h3><ul><li><p>编写一个拦截器类</p><ul><li>实现HandlerInterceptor接口</li></ul></li><li><p>编写一个配置类</p><ul><li>继承WebMvcConfigurerAdapter类</li><li>为该配置类添加@Configuration注解，让Spring Boot扫描类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span>    <span class="token comment" spellcheck="true">// 需要拦截的路径</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> addPathPatterns <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不拦截的路径</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> excludePathPatterns <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><h3 id="Spring-Boot-使用Servlet"><a href="#Spring-Boot-使用Servlet" class="headerlink" title="Spring Boot 使用Servlet"></a>Spring Boot 使用Servlet</h3><h3 id="Spring-Boot-使用Filter"><a href="#Spring-Boot-使用Filter" class="headerlink" title="Spring Boot 使用Filter"></a>Spring Boot 使用Filter</h3><h3 id="Spring-Boot-项目配置字符编码"><a href="#Spring-Boot-项目配置字符编码" class="headerlink" title="Spring Boot 项目配置字符编码"></a>Spring Boot 项目配置字符编码</h3><ul><li><p>第一种：使用传统的Spring提供给的字符编码过滤器</p></li><li><p>第二种：在核心配置文件中配置字符编码（推荐）</p></li></ul><h3 id="Spring-Boot-发布war包部署"><a href="#Spring-Boot-发布war包部署" class="headerlink" title="Spring Boot 发布war包部署"></a>Spring Boot 发布war包部署</h3><ul><li><p>程序入口类继承SpringBootServletInitializer类</p></li><li><p>程序入口类覆盖configure方法</p></li><li><p>在pom.xml中修改packaging标签为war</p></li><li><p>在pom.xml中添加SpringBoot打包的插件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Spring Boot 打包的插件 --></span>spring-boot-maven-plugin</code></pre></li><li><p>在项目中通过Maven install</p></li><li><p>将war包部署到tomcat下运行</p></li></ul><h3 id="Spring-Boot-发布jar包运行"><a href="#Spring-Boot-发布jar包运行" class="headerlink" title="Spring Boot 发布jar包运行"></a>Spring Boot 发布jar包运行</h3><ul><li>使用Java命令运行：java - jar</li></ul><h3 id="Spring-Boot-集成-Thymeleaf模板"><a href="#Spring-Boot-集成-Thymeleaf模板" class="headerlink" title="Spring Boot 集成 Thymeleaf模板"></a>Spring Boot 集成 Thymeleaf模板</h3><ul><li><p>认识Thymeleaf：Thymeleaf模板基于HTML，在非web环境下直接显示模板上的静态数据；在web环境下能像JSP一样从后台接收数据并替换掉模板上的静态数据</p></li><li><p>步骤</p><ol><li><p>引入Thymeleaf依赖、</p></li><li><p>在Spring boot的核心配置文件对Thymeleaf进行配置</p><pre class=" language-xml"><code class="language-xml"># 开发阶段，建议关闭thymeleaf的缓存spring.thymeleaf.cache = false# 使用遗留的html5以去掉对html标签的校验spring.thymeleaf.mode = LEGACYHTML5</code></pre><p>如果不想对标签进行严格的验证，使用spring.thymeleaf.mode = LEGACYHTML5去掉验证，去掉该验证，则需要引入如下依赖，否则报错</p><pre class=" language-xml"><code class="language-xml">nekohtmlunbescape</code></pre></li><li><p>写一个Controller去映射到模板页面</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"恭喜，Spring boot集成thymeleaf成功！"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>在/resources/thymeleaf下写一个index.html文件</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 需要在html标签中加入属性：xmlns:th="http://www.thymeleaf.org" --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${data}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>静态资源放置在/resources/static目录下</p></li></ol></li></ul><h3 id="Spring-Boot-Actuator"><a href="#Spring-Boot-Actuator" class="headerlink" title="Spring Boot Actuator"></a>Spring Boot Actuator</h3><ul><li><p>在pom.xml中配置相关的jar依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Spring Boot 监控的actuator起步依赖 --></span>spring-boot-starter-actuator</code></pre></li><li><p>在核心配置文件中指定监控的HTTP端口（如果不指定，则使用和server相同的端口）</p></li></ul><h3 id="Spring-Boot-非Web应用程序开发"><a href="#Spring-Boot-非Web应用程序开发" class="headerlink" title="Spring Boot 非Web应用程序开发"></a>Spring Boot 非Web应用程序开发</h3><h3 id="自定义-Banner"><a href="#自定义-Banner" class="headerlink" title="自定义 Banner"></a>自定义 Banner</h3><ul><li><p>在 Spring Boot 启动的时候会有一个默认的启动图案 </p><pre class=" language-tex"><code class="language-tex"> .   ____          _            __ _ _/\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \\\/  ___)| |_)| | | | | || (_| |  ) ) ) ) '  |____| .__|_| |_|_| |_\__, | / / / /=========|_|==============|___/=/_/_/_/:: Spring Boot ::        (v1.5.8.RELEASE)</code></pre></li><li><p>在 <code>src/main/resources</code> 目录下新建一个 banner.txt </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 该属性设置控制台中输出内容的颜色 --></span>${AnsiColor.BRIGHT_RED}//////////////////////////////////////////////////////////////////////                          _ooOoo_                               ////                         o8888888o                              ////                         88" . "88                              ////                         (| ^_^ |)                              ////                         O\  =  /O                              ////                      ____/`---'\____                           ////                    .'  \\|     |//  `.                         ////                   /  \\|||  :  |||//  \                        ////                  /  _||||| -:- |||||-  \                       ////                  |   | \\\  -  /// |   |                       ////                  | \_|  ''\---/''  |   |                       ////                  \  .-\__  `-`  ___/-. /                       ////                ___`. .'  /--.--\  `. . ___                     ////              ."" '&lt;  `.___\_<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>|</span><span class="token punctuation">></span></span>_/___.'  >'"".                  ////            | | :  `- \`.;`\ _ /`;.`/ - ` : | |                 ////            \  \ `-.   \_ __\ /__ _/   .-` /  /                 ////      ========`-.____`-.___\_____/___.-`____.-'========         ////                           `=---='                              ////      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ////            佛祖保佑       永不宕机     永无BUG                  //////////////////////////////////////////////////////////////////////</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
