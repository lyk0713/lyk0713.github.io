<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring</title>
      <link href="/2020/03/12/Spring/"/>
      <url>/2020/03/12/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="Spring的特点"><a href="#Spring的特点" class="headerlink" title="Spring的特点"></a>Spring的特点</h2><ul><li>开源、轻量级、非入侵式的框架</li><li>Spring就是一个轻量级的控制反转（IoC）和面向切面编程（AOP）的框架</li><li><strong>控制反转IoC是一种设计思想，依赖注入DI是实现IoC的一种方法。</strong></li><li><strong>控制反转是一种通过描述XML/注解并通过第三方去获取特定对象的方式。</strong></li><li><strong>在Spring中实现控制反转是IoC容器，其方法实现是依赖注入DI</strong></li></ul><h2 id="Spring的组成"><a href="#Spring的组成" class="headerlink" title="Spring的组成"></a>Spring的组成</h2><h3 id="程序耦合性"><a href="#程序耦合性" class="headerlink" title="程序耦合性"></a>程序耦合性</h3><ul><li><p><strong>耦合</strong>指的是程序间的依赖，包括类之间的依赖、方法之间的依赖。</p></li><li><p><strong>解耦</strong>指的是<strong>降低程序间的依赖关系</strong>。</p></li><li><p>实际开发中应该做到，编译时期不依赖，运行时期才依赖。</p></li></ul><h3 id="解耦的思路"><a href="#解耦的思路" class="headerlink" title="解耦的思路"></a>解耦的思路</h3><p>一、通过反射来创建对象，避免使用new的方式创建对象</p><p>二、通过读取配置文件来获取要创建的对象全限类名</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h3 id="创建Bean对象的工厂"><a href="#创建Bean对象的工厂" class="headerlink" title="创建Bean对象的工厂"></a>创建Bean对象的工厂</h3><ul><li><p>创建properties文件</p></li><li><p>创建BeanFactory工厂类</p><ul><li>定义Properties对象</li><li>使用静态代码块实例Properties对象</li><li>创建getBean()方法</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义Properties对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Properties props<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态代码块实例Properties对象</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 实例化</span>            props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取properties文件的流对象</span>            InputStream in <span class="token operator">=</span> BeanFactory<span class="token punctuation">.</span>getClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionInInitializerError</span><span class="token punctuation">(</span><span class="token string">"初始化properties对象失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取bean对象方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object bean <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String beanPath <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>beanname<span class="token punctuation">)</span><span class="token punctuation">;</span>            bean <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>beanPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次都会调用默认构造函数创建对象</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Bean工厂解耦升级版"><a href="#Bean工厂解耦升级版" class="headerlink" title="Bean工厂解耦升级版"></a>Bean工厂解耦升级版</h3><ul><li>解决多例</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义Properties对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Properties props<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义一个Map集合，用于存储我们要创建的对象，我们把它称之为容器</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> beans<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态代码块实例Properties对象</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 实例化</span>            props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取properties文件的流对象</span>            InputStream in <span class="token operator">=</span> BeanFactory<span class="token punctuation">.</span>getClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实例化容器</span>            beans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 取出配置文件中的所有key</span>            Enumeration keys <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 遍历枚举</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 取出每个Key</span>                String Key <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 根据Key获取Value</span>                String beanPath <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 反射创建对象</span>                Object value <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>beanPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 把key和value存入容器中</span>                beans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionInInitializerError</span><span class="token punctuation">(</span><span class="token string">"初始化properties对象失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取bean对象方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="Spring-IoC"><a href="#Spring-IoC" class="headerlink" title="Spring IoC"></a>Spring IoC</h1><h2 id="IoC的概述"><a href="#IoC的概述" class="headerlink" title="IoC的概述"></a>IoC的概述</h2><ul><li><p>把创建对象的权力交给Spring容器管理，降低程序间耦合性。</p></li><li><p><strong>Ioc原理：内部Map结构，通过id作为key，全限类名作为value</strong></p></li></ul><h3 id="IoC核心容器对象"><a href="#IoC核心容器对象" class="headerlink" title="IoC核心容器对象"></a>IoC核心容器对象</h3><ul><li><strong>ApplicationContext</strong>对应三个常用实现类<ul><li>ClassPathXmlApplicationContext：加载类路径下的配置文件</li><li>FileSystemXmlApplicationContext：加载磁盘任意路径下的配置文件（必须有访问权限）</li><li>AnnotationConfigApplicationContext</li></ul></li><li><strong>ApplicationContext</strong>采用策略加载完配置文件后立即创建对象的方式。</li></ul><h3 id="bean创建对象的三种方式"><a href="#bean创建对象的三种方式" class="headerlink" title="bean创建对象的三种方式"></a>bean创建对象的三种方式</h3><ul><li>set注入</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>第一种：通过使用默认构造函数创建，如果类中没有默认构造函数，则无法创建对象。</p><pre class=" language-java"><code class="language-java"></code></pre></li></ul><h3 id="用于创建对象的注解-Component"><a href="#用于创建对象的注解-Component" class="headerlink" title="用于创建对象的注解@Component"></a>用于创建对象的注解@Component</h3><ul><li>作用：用于把当前类对象放入Spring容器中</li><li>属性：value，用于指定bean的id。不写时，默认值为当前类名且首字母改小写。</li></ul><p><strong>为了明确三层对象，衍生了一下三个注解，作用与@Component是一样的。</strong></p><ul><li><p>@Controller：用于表现层</p></li><li><p>@Service：用于业务层</p></li><li><p>@Repository：用于持久层</p></li></ul><h3 id="用于注入数据的注解"><a href="#用于注入数据的注解" class="headerlink" title="用于注入数据的注解"></a>用于注入数据的注解</h3><ul><li><h4 id="Autowired：自动按照类型注入。"><a href="#Autowired：自动按照类型注入。" class="headerlink" title="@Autowired：自动按照类型注入。"></a>@Autowired：自动按照类型注入。</h4></li></ul><p><strong>如果容器中有唯一的一个bean对象类型和要注入数据类型一致，则直接按照数据类型注入。</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>如果容器中有多个Bean对象类型，则根据变量名称注入</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl1</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><ul><li>当使用@Autowired注解注入时，遇到多个Bean对象类型，可以和该注解同时使用，它不能单独使用</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl1</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userService1"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><ul><li>使用该注解等价于@Autowired和@Qualifier组合使用</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    @Autowired</span><span class="token comment" spellcheck="true">//  @Qualifier("userService1")</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span><span class="token string">"userService1"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><h4 id="Value：以上三个注解只能注入其他bean类型的数据，该注解用于注入基本数据类型和String类型的数据"><a href="#Value：以上三个注解只能注入其他bean类型的数据，该注解用于注入基本数据类型和String类型的数据" class="headerlink" title="@Value：以上三个注解只能注入其他bean类型的数据，该注解用于注入基本数据类型和String类型的数据"></a>@Value：以上三个注解只能注入其他bean类型的数据，该注解用于注入基本数据类型和String类型的数据</h4></li><li><h4 id="Scope：用于改变作用范围的注解，常用取值：singleton（单例）-prototype（多例）"><a href="#Scope：用于改变作用范围的注解，常用取值：singleton（单例）-prototype（多例）" class="headerlink" title="@Scope：用于改变作用范围的注解，常用取值：singleton（单例）/prototype（多例）"></a>@Scope：用于改变作用范围的注解，常用取值：singleton（单例）/prototype（多例）</h4></li></ul><h1 id="Spring-使用配置类取代xml"><a href="#Spring-使用配置类取代xml" class="headerlink" title="Spring 使用配置类取代xml"></a>Spring 使用配置类取代xml</h1><ul><li><h4 id="Configuration：放在类上，标记该类为配置类"><a href="#Configuration：放在类上，标记该类为配置类" class="headerlink" title="@Configuration：放在类上，标记该类为配置类"></a>@Configuration：放在类上，标记该类为配置类</h4></li><li><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><ul><li>放在类上，用于通过注解指定Spring在创建容器时要扫描的包。</li><li>属性：value，它和basePackages的作用是一样的，都是用于指定扫描指定包下的类</li><li>@ComponentScan(“com.xxx”)/@ComponentScan(“basePackages=”com.xxx”)<ul><li>等同xml配置中的&lt;context:component-scan base-package=”com.xxx”/&gt;</li></ul></li></ul></li><li><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><ul><li>作用：用于把当前方法的返回值作为bean对象存入Spring容器中</li><li>属性：name:指定bean的id，如果不写，默认为该方法的方法名</li><li>当方法有参数时，spring框架会去容器找其他可用bean对象，查找的方式和Autowired一样。</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.lyk"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 声明userRealm     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"userRealm"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserRealm <span class="token function">userRealm</span><span class="token punctuation">(</span>CredentialsMatcher credentialsMatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserRealm userRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注入凭证匹配器</span>        userRealm<span class="token punctuation">.</span><span class="token function">setCredentialsMatcher</span><span class="token punctuation">(</span>credentialsMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userRealm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置SecurityManager     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"securityManager"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SecurityManager <span class="token function">securityManager</span><span class="token punctuation">(</span>UserRealm userRealm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultWebSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注入userRealm</span>        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>userRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><ul><li>作用：用于导入其他的配置类</li><li>属性value：用于指定其他配置类的字节码</li></ul></li><li><h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h4><ul><li>作用：用于指定properties文件的位置</li><li>属性value：指定文件的名称和路径，关键字：classpath表示类路径下</li></ul></li></ul><h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><h2 id="AOP的实现方式一"><a href="#AOP的实现方式一" class="headerlink" title="AOP的实现方式一"></a>AOP的实现方式一</h2><ul><li>引入AOP织入依赖包 - aspectjweaver</li><li>切入类实现MethodBeforeAdvice</li></ul><h2 id="AOP的实现方式二"><a href="#AOP的实现方式二" class="headerlink" title="AOP的实现方式二"></a>AOP的实现方式二</h2><ul><li>编写一个切入类</li><li>切入类中编写方法</li></ul><h2 id="AOP的实现方式三（注解）"><a href="#AOP的实现方式三（注解）" class="headerlink" title="AOP的实现方式三（注解）"></a>AOP的实现方式三（注解）</h2><ul><li>编写一个切入类，类上标注@Aspect注解</li><li>切入类中的方法使用@Before(“excution()”)、@After()、@Around</li></ul><h1 id="Spring-事务管理"><a href="#Spring-事务管理" class="headerlink" title="Spring 事务管理"></a>Spring 事务管理</h1><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><ul><li>基于AOP实现</li></ul><h2 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h2><ul><li>在代码中进行事务管理</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
